commit fcd0f35dcf591ae2dad5733e9d3373d7f9cbd2a6
Author: alexandresalome <alexandre.salome@gmail.com>
Date:   Thu May 2 18:12:57 2013 +0200

    first draft

diff --git a/src/WebDriver/Browser.php b/src/WebDriver/Browser.php
index 3ae1ebc..847abbe 100644
--- a/src/WebDriver/Browser.php
+++ b/src/WebDriver/Browser.php
@@ -35,6 +35,11 @@ class Browser
     private $client;
 
     /**
+     * @var CookieBag
+     */
+    private $cookieBag;
+
+    /**
      * @var boolean
      */
     protected $closeOnDestruct = true;
@@ -63,6 +68,15 @@ class Browser
         $this->sessionId  = $sessionId;
     }
 
+    public function getCookies()
+    {
+        if (null === $this->cookieBag) {
+            $this->cookieBag = new CookieBag($this);
+        }
+
+        return $this->cookieBag;
+    }
+
     /**
      * Open a URL. The function will wait for page to load before returning the
      * value. If any redirection occurs, it will follow them before returning
diff --git a/src/WebDriver/Cookie.php b/src/WebDriver/Cookie.php
new file mode 100644
index 0000000..08fed56
--- /dev/null
+++ b/src/WebDriver/Cookie.php
@@ -0,0 +1,153 @@
+<?php
+
+/*
+ * This file is part of PHP WebDriver Library.
+ * (c) Alexandre Salomé <alexandre.salome@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace WebDriver;
+
+/**
+ * @author Alexandre Salomé <alexandre.salome@gmail.com>
+ */
+class Cookie
+{
+    /**
+     * @var string
+     */
+    protected $name;
+
+    /**
+     * @var string
+     */
+    protected $value;
+
+    /**
+     * @var string|null
+     */
+    protected $path;
+
+    /**
+     * @var string|null
+     */
+    protected $domain;
+
+    /**
+     * @var boolean|null
+     */
+    protected $isSecure;
+
+    /**
+     * @var DateTime|null
+     */
+    protected $expiry;
+
+    public function __construct($name, $value, $path = '/', $domain = null, $isSecure = null, \DateTime $expiry = null)
+    {
+        $this->name     = $name;
+        $this->value    = $value;
+        $this->path     = $path;
+        $this->domain   = $domain;
+        $this->isSecure = $isSecure;
+        $this->expiry   = $expiry;
+    }
+
+    static public function fromArray(array $array)
+    {
+        $name      = $array['name'];
+        $value     = $array['value'];
+        $path      = isset($array['path']) ? $array['path'] : null;
+        $domain    = isset($array['domain']) ? $array['domain'] : null;
+        $isSecure  = isset($array['secure']) ? $array['secure'] : null;
+        $expiry    = isset($array['expiry']) ? \DateTime::createFromFormat('U', $array['expiry']) : null;
+
+        return new self($name, $value, $path, $domain, $isSecure, $expiry);
+    }
+
+    public function toArray()
+    {
+        return array(
+            'name'   => $this->name,
+            'value'  => $this->value,
+            'path'   => $this->path,
+            'domain' => $this->domain,
+            'secure' => $this->secure,
+            'expiry' => null === $this->expiry ? null : $this->expiry->getTimestamp()
+        );
+    }
+
+    public function getName()
+    {
+        return $this->name;
+    }
+
+    public function setName($name)
+    {
+        $this->name = $name;
+
+        return $this;
+    }
+
+    public function getValue()
+    {
+        return $this->value;
+    }
+
+    public function setValue($value)
+    {
+        $this->value = $value;
+
+        return $this;
+    }
+
+    public function getPath()
+    {
+        return $this->path;
+    }
+
+    public function setPath($path)
+    {
+        $this->path = $path;
+
+        return $this;
+    }
+
+    public function getDomain()
+    {
+        return $this->domain;
+    }
+
+    public function setDomain($domain)
+    {
+        $this->domain = $domain;
+
+        return $this;
+    }
+
+    public function isSecure()
+    {
+        return $this->isSecure;
+    }
+
+    public function setSecure($secure)
+    {
+        $this->secure = $secure;
+
+        return $this;
+    }
+
+    public function getExpiry()
+    {
+        return $this->expiry;
+    }
+
+    public function setExpiry(\DateTime $expiry = null)
+    {
+        $this->name = $name;
+
+        return $this;
+    }
+}
diff --git a/src/WebDriver/CookieBag.php b/src/WebDriver/CookieBag.php
new file mode 100644
index 0000000..ecfc604
--- /dev/null
+++ b/src/WebDriver/CookieBag.php
@@ -0,0 +1,150 @@
+<?php
+
+/*
+ * This file is part of PHP WebDriver Library.
+ * (c) Alexandre Salomé <alexandre.salome@gmail.com>
+ *
+ * For the full copyright and license information, please view the LICENSE
+ * file that was distributed with this source code.
+ */
+
+namespace WebDriver;
+
+/**
+ * @author Alexandre Salomé <alexandre.salome@gmail.com>
+ */
+class CookieBag
+{
+    /**
+     * @var Browser
+     */
+    protected $browser;
+
+    /**
+     * @param Browser $browser Browser attached to the cookie bag
+     */
+    public function __construct(Browser $browser)
+    {
+        $this->browser = $browser;
+    }
+
+    /**
+     * Search an element starting from current element.
+     *
+     * @param By $by Selection method
+     *
+     * @return Element
+     *
+     * @see Browser::element
+     */
+    public function element(By $by)
+    {
+        return $this->browser->element($by, $this);
+    }
+
+    /**
+     * Search for elements starting from current element.
+     *
+     * @param By $by Selection method
+     *
+     * @see Browser::elements
+     */
+    public function elements(By $by)
+    {
+        return $this->browser->elements($by, $this);
+    }
+
+    /**
+     * Returns the tag name.
+     *
+     * @return string
+     */
+    public function getTagName()
+    {
+        return $this->requestValue('name');
+    }
+
+    /**
+     * Clears the field value.
+     */
+    public function clear()
+    {
+        return $this->request('POST', 'clear');
+    }
+
+    /**
+     * Returns text representation of element.
+     */
+    public function getText()
+    {
+        return $this->requestValue('text');
+    }
+
+    public function submit()
+    {
+        return $this->request('POST', 'submit');
+    }
+
+    public function click()
+    {
+        return $this->request('POST', 'click');
+    }
+
+    public function getAttribute($name)
+    {
+        return $this->requestValue('attribute/'.$name);
+    }
+
+    public function type($value)
+    {
+        $this->request('POST', 'value', json_encode(array('value' => array($value))));
+    }
+
+    public function request($verb, $path, $content = null, array $headers = array())
+    {
+        return $this->browser->request($verb, sprintf('element/%s/%s', $this->id, $path), $content, $headers);
+    }
+
+    public function getId()
+    {
+        return $this->id;
+    }
+
+    /**
+     * Uploads a file to the selected field.
+     *
+     * @param string $file Absolute path to the file
+     *
+     * @return string Path on server.
+     */
+    public function upload($file)
+    {
+        $zip = new Zip();
+        $zip->addFile($file);
+
+        $response = $this->browser->request('POST', 'file', json_encode(array('file' => base64_encode($zip->getContent()))));
+        $content  = json_decode($response->getContent(), true);
+
+        if (!isset($content['value'])) {
+            throw new LibraryException('Malformed expression, no key "value" in response: '.$response->getContent());
+        }
+
+        $file = $content['value'];
+
+        $this->type($file);
+
+        return $file;
+    }
+
+    protected function requestValue($name)
+    {
+        $response = $this->request('GET', $name);
+        $content  = json_decode($response->getContent(), true);
+
+        if (!isset($content['value'])) {
+            throw new LibraryException('Malformed expression, no key "value" in response: '.$response->getContent());
+        }
+
+        return $content['value'];
+    }
+}
diff --git a/tests/WebDriver/Tests/CookieTest.php b/tests/WebDriver/Tests/CookieTest.php
new file mode 100644
index 0000000..6e82af2
--- /dev/null
+++ b/tests/WebDriver/Tests/CookieTest.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace WebDriver\Tests;
+
+use WebDriver\Cookie;
+
+class CookieTest extends \PHPUnit_Framework_TestCase
+{
+    public function testFromArray_complete()
+    {
+        $array = array(
+            'name'  => 'foo',
+            'value' => 'bar'
+        );
+
+        $cookie = Cookie::fromArray($array);
+
+        $this->assertEquals('foo', $cookie->getName());
+        $this->assertEquals('bar', $cookie->getValue()); 
+    }
+
+    public function testFromArray_minimal()
+    {
+        $array = array(
+            'name'  => 'foo',
+            'value' => 'bar'
+        );
+
+        $cookie = Cookie::fromArray($array);
+
+        $this->assertEquals('foo', $cookie->getName());
+        $this->assertEquals('bar', $cookie->getValue());
+    }
+}
